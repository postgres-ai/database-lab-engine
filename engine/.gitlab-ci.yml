default:
  image:
    name: golang:1.23
    pull_policy: if-not-present

stages:
  - test
  - build-binary
  - build
  - integration-test
  - deploy

## Conditions.
.only_engine: &only_engine
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[a-zA-Z0-9_.-]*/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - engine/**/*
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - engine/**/*

.only_dle_tag_release: &only_tag_release
  rules:
   - if: $CI_COMMIT_TAG =~ /^v[0-9.]+$/

.only_dle_tag_rc: &only_tag_rc
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9.]+[\-_]*[a-zA-Z]+[a-zA-Z0-9.\-_]*[a-zA-Z0-9]+$/

.only_dle_master: &only_master
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - engine/**/*

.only_dle_feature: &only_feature
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - engine/**/*

test:
  <<: *only_engine
  stage: test
  script:
    - cd engine
    - make test

lint:
  <<: *only_engine
  stage: test
  script:
    - cd engine
    - make lint

### Build binary.
build-binary-alpine:
  <<: *only_engine
  image:
    name: golang:1.23-alpine
    pull_policy: if-not-present
  stage: build-binary
  artifacts:
    paths:
      - engine/bin
  script:
    - apk add --update --no-cache make git
    - cd engine
    - make build

build-binary-client-dev:
  <<: *only_feature
  stage: build-binary
  artifacts:
    paths:
      - engine/bin
  script:
    - cd engine
    - make build-client

build-binary-client-master:
  <<: *only_master
  stage: build-binary
  script:
    - cd engine
    - make build-client

    # Install google-cloud-sdk.
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    # Authenticate.
    - echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

    # Upload artifacts.
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/master/

build-binary-client:
  <<: *only_tag_release
  stage: build-binary
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  script:
    - cd engine
    - make build-client

    # Install google-cloud-sdk.
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    # Authenticate.
    - echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

    # Upload artifacts.
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/${CLEAN_TAG}/
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/latest/

build-binary-client-rc:
  <<: *only_tag_rc
  stage: build-binary
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  script:
    - cd engine
    - make build-client

    # Install google-cloud-sdk.
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    # Authenticate.
    - echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

    # Upload artifacts.
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/${CLEAN_TAG}/

.docker_vars: &docker_vars
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

.job_template: &build_image_definition
  image:
    name: docker:24
    pull_policy: if-not-present
  stage: build
  artifacts:
    paths:
      - engine/bin
  services:
    - name: docker:24-dind
      alias: docker
      command: [ "--tls=false" ]
      pull_policy: if-not-present    
  script:
    - cd engine
    - apk update && apk upgrade && apk add --no-cache bash # TODO(anatoly): Remove dependency.
    - bash ./scripts/ci_docker_build_push.sh

build-image-feature-server:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/dblab-server"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}"

build-image-feature-server-zfs08:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server-zfs08"
    DOCKER_NAME: "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/dblab-server"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}-zfs0.8"

build-image-feature-ci-checker:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/dblab-ci-checker"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}"

build-image-feature-client:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/dblab-cli"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}"

build-image-master-server:
  <<: *build_image_definition
  <<: *only_master
  variables:
    <<: *docker_vars
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
    TAGS: "${DOCKER_NAME}:master,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}"

build-image-master-server-zfs08:
  <<: *build_image_definition
  <<: *only_master
  variables:
    <<: *docker_vars
    DOCKER_FILE: "Dockerfile.dblab-server-zfs08"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
    TAGS: "${DOCKER_NAME}:master-zfs0.8,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}-zfs0.8"

build-image-master-ci-checker:
  <<: *build_image_definition
  <<: *only_master
  variables:
    <<: *docker_vars
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
    TAGS: "${DOCKER_NAME}:master,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}"

build-image-master-client:
  <<: *build_image_definition
  <<: *only_master
  variables:
    <<: *docker_vars
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-cli"
    TAGS: "${DOCKER_NAME}:master,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}"

build-image-latest-server:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "postgresai/dblab-server"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG},${DOCKER_NAME}:${CLEAN_TAG}"
build-image-latest-server-zfs08:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server-zfs08"
    DOCKER_NAME: "postgresai/dblab-server"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG}-zfs0.8,${DOCKER_NAME}:${CLEAN_TAG}-zfs0.8"

build-image-latest-server-dev:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-ci-checker:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "postgresai/dblab-ci-checker"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG},${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-ci-checker-dev:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-client:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "postgresai/dblab"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG},${DOCKER_NAME}:${CLEAN_TAG}"

build-image-rc-server:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "postgresai/dblab-server"

build-image-rc-server-zfs08:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}-zfs0.8"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server-zfs08"
    DOCKER_NAME: "postgresai/dblab-server"
build-image-rc-server-dev:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
build-image-rc-server-dev-zfs08:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}-zfs0.8"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server-zfs08"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
build-image-rc-ci-checker:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "postgresai/dblab-ci-checker"
build-image-rc-ci-checker-dev:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
build-image-rc-client:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"
  variables:
    <<: *docker_vars
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "postgresai/dblab"
build-image-swagger-release:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    <<: *docker_vars
    DOCKER_FILE: "Dockerfile.swagger-ui"
    DOCKER_IMAGE_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-swagger-ui"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_IMAGE_NAME}:${CLEAN_TAG}"

.bash-test: &bash_test
  stage: integration-test
  variables:
    IMAGE_TAG: "${CI_COMMIT_REF_SLUG}"
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "postgres-ai"'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - engine/**/*
  artifacts:
    paths:
      - engine/bin
  before_script:
    - bash engine/test/_cleanup.sh
  script:
    - bash engine/test/1.synthetic.sh
    - bash engine/test/2.logical_generic.sh
    - bash engine/test/4.physical_basebackup.sh
  after_script:
    - bash engine/test/_cleanup.sh
  tags:
    - dle-test

bash-test-9-6:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: "9.6"

bash-test-10:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 10

bash-test-11:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 11

bash-test-12:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 12

bash-test-13:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 13

bash-test-14:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 14

bash-test-15:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 15

bash-test-16:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 16

bash-test-17:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 17

integration-test:
  services:
    - name: docker:24-dind
      alias: docker
      command: [ "--tls=false" ]
      pull_policy: if-not-present
  <<: *only_feature
  stage: integration-test
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Improve performance with overlayfs.
    DOCKER_DRIVER: overlay2
    # Maximum supported API version is 1.41 for the current image
    DOCKER_API_VERSION: "1.41"
  script:
    - cd engine
    - make test-ci-integration

## Deploy
.deploy-definition: &deploy_definition
  stage: deploy
  image:
    name: dtzar/helm-kubectl:2.14.1
    pull_policy: if-not-present
  script:
    - bash ./engine/scripts/do.sh subs_envs ./engine/deploy/swagger-ui.yaml /tmp/swagger-ui.yaml
    - kubectl apply --filename /tmp/swagger-ui.yaml -n $NAMESPACE

deploy-swagger-ui-tag-release:
  <<: *only_tag_release
  <<: *deploy_definition
  environment:
    name: production
  variables:
    ENV: production
    NAMESPACE: production
    DOCKER_IMAGE_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-swagger-ui"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAG="${DOCKER_IMAGE_NAME}:${CLEAN_TAG}"
