# OpenAPI spec for DBLab API
# Useful links:
# - validate and test: https://editor.swagger.io/
# - GitHub (give us a ⭐️): https://github.com/postgres-ai/database-lab-engine

openapi: 3.0.1
info:
  title: DBLab API
  description: This page provides the OpenAPI specification for the Database Lab (DBLab)
    API, previously recognized as the DBLab API (Database Lab Engine API).
  contact:
    name: DBLab API Support
    url: https://postgres.ai/contact
    email: api@postgres.ai
  license:
    name: AGPL v3 / Database Lab License
    url: https://github.com/postgres-ai/database-lab-engine/blob/master/LICENSE
  version: 3.5.0
externalDocs:
  description: DBLab Docs
  url: https://gitlab.com/postgres-ai/docs/tree/master/docs/database-lab

servers:
  - url: "https://demo.dblab.dev/api"
    description: "DBLab demo server; token: 'demo-token'"
    x-examples:
      Verification-Token: "demo-token"
  - url: "{scheme}://{host}:{port}/{basePath}"
    description: "Any DBLab accessed locally / through SSH port forwarding"
    variables:
      scheme:
        enum:
          - "https"
          - "http"
        default: "http"
        description: "'http' for local connections and SSH port forwarding;
          'https' for everything else."
      host:
        default: "127.0.0.1"
        description: "Where DBLab server is installed. Use '127.0.0.1' to work locally
          or when SSH port forwarding is used."
      port:
        default: "2345"
        description: "Port to access DLE UI or API. Originally, '2345' is used for
          direct work with API and '2346' – with UI. However, with UI, API is also available,
          at ':2346/api'."
      basePath:
        default: ""
        description: "'basePath' value to access API. Use empty when working with API port
          (2345 by default), or '/api' when working with UI port ('2346' by default)."
    x-examples:
      Verification-Token: "custom_example_token"

tags:
  - name: "DBLab"
    description: "DBLab API Reference"
    externalDocs:
      description: "DBLab Docs - tutorials, howtos, references."
      url: "https://postgres.ai/docs/database-lab"

paths:
  /status:
    get:
      tags:
        - Instance
      summary: "DBLab instance status, instance info, and list of clones"
      description: "Retrieves detailed information about the DBLab instance:
        status, version, etc. Additionally retrieves a list of all available clones."
      operationId: getInstanceStatus
      parameters:
        - in: header
          name: Verification-Token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returned a list of snapshots.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instance"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."

  /snapshots:
    get:
      tags:
        - Snapshots
      summary: List all snapshots
      description: Return a list of all available snapshots.
      operationId: snapshots
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Snapshot"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."

  /clone:
    post:
      tags:
        - Clones
      summary: Create a clone
      operationId: createClone
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      requestBody:
        description: "Clone object"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClone'
      responses:
        201:
          description: Created a new clone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clone"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /clone/{id}:
    get:
      tags:
        - Clones
      summary: Retrieve a clone
      description: Retrieves the information for the specified clone.
      operationId: clones
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
        - in: path
          required: true
          name: "id"
          schema:
            type: "string"
          description: "Clone ID"
      responses:
        200:
          description: Returned detailed information for the specified clone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clone"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Clones
      summary: Update a clone
      description: "Updates the specified clone by setting the values of the parameters passed.
        Currently, only one paramater is supported: 'protected'."
      operationId: patchClone
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
        - in: path
          required: true
          name: "id"
          schema:
            type: "string"
          description: "Clone ID"
      requestBody:
        description: "Clone object"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClone'
      responses:
        200:
          description: Successfully updated the specified clone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clone"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
        #404:  # TODO: fix it in engine (currently returns 500)
        #  description: Not found
        #  content:
        #    application/json:
        #      schema:
        #        $ref: '#/components/schemas/Error'
        #      example:
        #        code: NOT_FOUND
        #        message: Requested object does not exist. Specify your request.

    delete:
      tags:
        - Clones
      summary: Delete a clone
      description: Permanently delete the specified clone. It cannot be undone.
      operationId: destroyClone
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
        - in: path
          required: true
          name: "id"
          schema:
            type: "string"
          description: "Clone ID"
      responses:
        200:
          description: Successfully deleted the specified clone
          content:
            application/json:
              example:
                "OK"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /clone/{id}/reset:
    post:
      tags:
        - Clones
      summary: Reset a clone
      description: "Reset the specified clone to a previously stored state.
        This can be done by specifying a particular snapshot ID or using the 'latest' flag.
        All changes made after the snapshot are discarded during the reset, unless those
        changes were preserved in a snapshot. All database connections will be reset,
        requiring users and applications to reconnect. The duration of the reset operation
        is comparable to the creation of a new clone. However, unlike creating a new clone,
        the reset operation retains the database credentials and does not change the port.
        Consequently, users and applications can continue to use the same database credentials
        post-reset, though reconnection will be necessary. Please note that any unsaved changes
        will be irretrievably lost during this operation, so ensure necessary data is backed up
        in a snapshot prior to resetting the clone."
      operationId: resetClone
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
        - in: path
          required: true
          name: "id"
          schema:
            type: "string"
          description: "Clone ID"
      requestBody:
        description: "Reset object"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetClone'
      responses:
        200:
          description: Successfully reset the state of the specified clone
          content:
            application/json:
              example:
                "OK"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /observation/start:
    post:
      tags:
        - Observation
      summary: Start observing
      description: "[EXPERIMENTAL] Start an observation session for the specified clone.
        Observation sessions help detect dangerous (long-lasting, exclusive) locks in CI/CD pipelines.
        One of common scenarios is using observation sessions to test schema changes (DB migrations)."
      operationId: startObservation
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      requestBody:
          description: "Start observation object"
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartObservationRequest'
      responses:
        200:
          description: Observation started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObservationSession"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /observation/stop:
    post:
      tags:
        - Observation
      summary: Stop observing
      description: "[EXPERIMENTAL] Stop the previously started observation session."
      operationId: stopObservation
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      requestBody:
        description: Stop observation object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopObservationRequest'
        required: true
      responses:
        200:
          description: Observation stopped
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObservationSession"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /observation/summary/{clone_id}/{session_id}:
    get:
      tags:
        - Observation
      summary: Get observation summary
      description: "[EXPERIMENTAL] Collect the observation summary info."
      operationId: summaryObservation
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
        - in: path
          required: true
          name: "clone_id"
          schema:
            type: "string"
          description: "Clone ID"
        - in: path
          required: true
          name: "session_id"
          schema:
            type: "string"
          description: "Session ID"
      responses:
        200:
          description: Observation summary collected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObservationSummaryArtifact"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /observation/download:
    get:
      tags:
        - Observation
      summary: Download an observation artifact
      description: "[EXPERIMENTAL] Download an artifact for the specified clone and observation session."
      operationId: downloadObservationArtifact
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
        - in: query
          required: true
          name: "artifact_type"
          schema:
            type: "string"
          description: "Type of the requested artifact"
        - in: query
          required: true
          name: "clone_id"
          schema:
            type: "string"
          description: "Clone ID"
        - in: query
          required: true
          name: "session_id"
          schema:
            type: "string"
          description: "Session ID"
      responses:
        200:
          description: Downloaded the specified artifact of the specified
            observation session and clone
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /instance/retrieval:
    get:
      tags:
        - Instance
      summary: Data refresh status
      description: 'Report a status of the data refresh subsystem (also known as
        "data retrieval"): timestamps of the previous and next refresh runs, status, messages.'
      operationId: instanceRetrieval
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: Reported a status of the data retrieval subsystem
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retrieving"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."

  /healthz:
    get:
      tags:
        - Instance
      summary: Service health check
      description: "Check the overall health and availability of the API system.
        This endpoint does not require the 'Verification-Token' header."
      operationId: healthCheck
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: Returned general health status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Engine"

  /admin/config:
    get:
      tags:
        - Admin
      summary: Get config
      description: "Retrieve the DBLab configuration. All sensitive values are masked.
        Only limited set of configuration parameters is returned – only those that can be
        changed via API (unless reconfiguration via API is disabled by admin). The result
        is provided in JSON format."
      operationId: getConfig
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
    post:
      tags:
        - Admin
      summary: Set config
      description: "Set specific configurations for the DBLab instance using this endpoint.
        The returned configuration parameters are limited to those that can be modified
        via the API (unless the API-based reconfiguration has been disabled by an administrator).
        The result will be provided in JSON format."
      operationId: setConfig
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      requestBody:
        description: "Set configuration object"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        200:
          description: Successfully saved and applied configuration parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: BAD_REQUEST
                message: configuration management via UI/API disabled by admin
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."

  /admin/config.yaml:
    get:
      tags:
        - Admin
      summary: Get full config (YAML)
      description: "Retrieve the DBLab configuration in YAML format. All sensitive values are masked.
        This method allows seeing the entire configuration file and can be helpful for
        reviewing configuration and setting up workflows to automate DBLab provisioning
        and configuration."
      operationId: getConfigYaml
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: "Returned configuration (YAML)"
          content:
            application/yaml:
              schema:
                $ref: "#/components/schemas/Config"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
  /admin/test-db-source:
    post:
      tags:
        - Admin
      summary: Test source database
      description: ""
      operationId: testDBConnection
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      requestBody:
        description: "Connection DB object"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestConnectionResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: BAD_REQUEST
                message: configuration management via UI/API disabled by admin
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
  /admin/ws-auth:
    post:
      tags:
        - Admin
      summary: "TBD"
      description: ""
      operationId: testDBConnection2
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WSToken"
  /admin/billing-status:
    get:
      tags:
        - Admin
      summary: Checks billing status
      description: ""
      operationId: billingStatus
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingStatus"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."
  /admin/activate:
    post:
      tags:
        - Admin
      summary: "Activate billing"
      description: "Activates billing and sends usage statistics of the instance"
      operationId: activateBilling
      parameters:
        - in: header
          name: Verification-Token
          schema:
            type: string
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Engine"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: "UNAUTHORIZED"
                message: "Check your verification token."

components:
  schemas:

    Instance:
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/Status"
        engine:
          $ref: "#/components/schemas/Engine"
        pools:
          type: "array"
          items:
            $ref: "#/components/schemas/PoolEntry"
        cloning:
          $ref: "#/components/schemas/Cloning"
        retrieving:
          $ref: "#/components/schemas/Retrieving"
        provisioner:
          $ref: "#/components/schemas/Provisioner"
        synchronization:
          $ref: "#/components/schemas/Synchronization"

    Status:
      type: "object"
      required:
        - "code"
        - "message"
      properties:
        code:
          type: "string"
          description: "Status code"
        message:
          type: "string"
          description: "Status description"

    Engine:
      type: "object"
      properties:
        version:
          type: "string"
        edition:
          type: "string"
        billingActive:
          type: boolean
        instanceID:
          type: string
        startedAt:
          type: "string"
          format: "date-time"
        telemetry:
          type: boolean
        disableConfigModification:
          type: boolean

    PoolEntry:
      type: "object"
      properties:
        name:
          type: "string"
        mode:
          type: "string"
        dataStateAt:
          type: "string"
          format: "date-time"
        status:
          type: "string"
        cloneList:
          type: "array"
          items:
            type: "string"
        fileSystem:
          $ref: "#/components/schemas/FileSystem"

    FileSystem:
      type: "object"
      properties:
        mode:
          type: "string"
        free:
          type: "integer"
          format: "int64"
        size:
          type: "integer"
          format: "int64"
        used:
          type: "integer"
          format: "int64"
        dataSize:
          type: "integer"
          format: "int64"
        usedBySnapshots:
          type: "integer"
          format: "int64"
        usedByClones:
          type: "integer"
          format: "int64"
        compressRatio:
          type: "integer"
          format: "float64"

    Cloning:
      type: "object"
      properties:
        expectedCloningTime:
          type: "integer"
          format: "float64"
        numClones:
          type: "integer"
          format: "int64"
        clones:
          type: "array"
          items:
            $ref: "#/components/schemas/Clone"

    Retrieving:
      type: "object"
      properties:
        mode:
          type: "string"
        status:
          type: "string"
        lastRefresh:
          type: "string"
          format: "date-time"
        nextRefresh:
          type: "string"
          format: "date-time"
        activity:
          $ref: "#/components/schemas/Activity"

    Activity:
      type: "object"
      properties:
        source:
          type: "array"
          items:
            $ref: "#/components/schemas/PGActivityEvent"
        target:
          type: "array"
          items:
            $ref: "#/components/schemas/PGActivityEvent"

    PGActivityEvent:
      type: "object"
      properties:
        user:
          type: "string"
        query:
          type: "string"
        duration:
          type: "number"
        waitEventType:
          type: "string"
        waitEvent:
          type: "string"

    Provisioner:
      type: "object"
      properties:
        dockerImage:
          type: "string"
        containerConfig:
          type: "object"

    Synchronization:
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/Status"
        startedAt:
          type: "string"
          format: "date-time"
        lastReplayedLsn:
          type: "string"
        lastReplayedLsnAt:
          type: "string"
          format: "date-time"
        replicationLag:
          type: "string"
        replicationUptime:
          type: "integer"

    Snapshot:
      type: "object"
      properties:
        id:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        dataStateAt:
          type: "string"
          format: "date-time"
        physicalSize:
          type: "integer"
          format: "int64"
        logicalSize:
          type: "integer"
          format: "int64"
        pool:
          type: "string"
        numClones:
          type: "integer"
          format: "int"

    Database:
      type: "object"
      properties:
        connStr:
          type: "string"
        host:
          type: "string"
        port:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"

    Clone:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        snapshot:
          $ref: "#/components/schemas/Snapshot"
        protected:
          type: "boolean"
          default: false
        deleteAt:
          type: "string"
          format: "date-time"
        createdAt:
          type: "string"
          format: "date-time"
        status:
          $ref: "#/components/schemas/Status"
        db:
          $ref: "#/components/schemas/Database"
        metadata:
          $ref: "#/components/schemas/CloneMetadata"

    CloneMetadata:
      type: "object"
      properties:
        cloneDiffSize:
          type: "integer"
          format: "int64"
        logicalSize:
          type: "integer"
          format: "int64"
        cloningTime:
          type: "integer"
          format: "float64"
        maxIdleMinutes:
          type: "integer"
          format: "int64"

    CreateClone:
      type: "object"
      properties:
        id:
          type: "string"
        snapshot:
          type: "object"
          properties:
            id:
              type: "string"
        protected:
          type: "boolean"
          default: false
        db:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
            restricted:
              type: "boolean"
              default: false
            db_name:
              type: "string"

    ResetClone:
      type: "object"
      description: "Object defining specific snapshot used when resetting clone. Optional parameters `latest` and `snapshotID` must not be specified together"
      properties:
        snapshotID:
          type: "string"
        latest:
          type: "boolean"
          default: false

    UpdateClone:
      type: "object"
      properties:
        protected:
          type: "boolean"
          default: false

    StartObservationRequest:
      type: "object"
      properties:
        clone_id:
          type: "string"
        config:
          $ref: "#/components/schemas/ObservationConfig"
        tags:
          type: "object"
        db_name:
          type: "string"

    ObservationConfig:
      type: "object"
      properties:
        observation_interval:
          type: "integer"
          format: "int64"
        max_lock_duration:
          type: "integer"
          format: "int64"
        max_duration:
          type: "integer"
          format: "int64"

    ObservationSession:
      type: "object"
      properties:
        session_id:
          type: "integer"
          format: "int64"
        started_at:
          type: "string"
          format: "date-time"
        finished_at:
          type: "string"
          format: "date-time"
        config:
          $ref: "#/components/schemas/ObservationConfig"
        tags:
          type: "object"
        artifacts:
          type: array
          items:
            type: string
        result:
          $ref: "#/components/schemas/ObservationResult"

    ObservationResult:
      type: "object"
      properties:
        status:
          type: "string"
        intervals:
          type: array
          items:
            $ref: "#/components/schemas/ObservationInterval"
        summary:
          $ref: "#/components/schemas/ObservationSummary"

    ObservationInterval:
      type: "object"
      properties:
        started_at:
          type: "string"
          format: "date-time"
        duration:
          type: "integer"
          format: "int64"
        warning:
          type: string

    ObservationSummary:
      type: "object"
      properties:
        total_duration:
          type: "integer"
          format: "float64"
        total_intervals:
          type: "integer"
          format: "int"
        warning_intervals:
          type: "integer"
          format: "int"
        checklist:
          $ref: "#/components/schemas/ObservationChecklist"

    ObservationChecklist:
      type: "object"
      properties:
        overall_success:
          type: boolean
        session_duration_acceptable:
          type: boolean
        no_long_dangerous_locks:
          type: boolean

    StopObservationRequest:
      type: "object"
      properties:
        clone_id:
          type: "string"
        overall_error:
          type: "boolean"

    SummaryObservationRequest:
      type: "object"
      properties:
        clone_id:
          type: "string"
        session_id:
          type: "string"

    ObservationSummaryArtifact:
      type: "object"
      properties:
        session_id:
          type: "integer"
          format: "int64"
        clone_id:
          type: "string"
        duration:
          type: "object"
        db_size:
          type: "object"
        locks:
          type: "object"
        log_errors:
          type: "object"
        artifact_types:
          type: "array"
          items:
            type: "string"

    Error:
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
        detail:
          type: "string"
        hint:
          type: "string"

    Config:
      type: object

    Connection:
      type: "object"
      properties:
        host:
          type: "string"
        port:
          type: "string"
        dbname:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
        db_list:
          type: "array"
          items:
            type: "string"

    TestConnectionResponse:
      type: "object"
      properties:
        status:
          type: "string"
        result:
          type: "string"
        message:
          type: "string"
        dbVersion:
          type: "integer"
        tuningParams:
          type: "object"
          additionalProperties:
            type: "string"

    WSToken:
      type: "object"
      properties:
        token:
          type: "string"
          description: "WebSocket token"

    BillingStatus:
      type: "object"
      properties:
        result:
          type: string
        billing_active:
          type: boolean
        recognized_org:
          $ref: "#/components/schemas/RecognizedOrg"

    RecognizedOrg:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        alias:
          type: string
        billing_page:
          type: string
        priveleged_until:
          type: string
          format: date-time
